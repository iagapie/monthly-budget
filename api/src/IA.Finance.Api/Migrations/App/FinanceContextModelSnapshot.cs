// <auto-generated />
using System;
using IA.Finance.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace IA.Finance.Api.Migrations.App
{
    [DbContext(typeof(FinanceContext))]
    partial class FinanceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.AppUserId", "'AppUserId', '', '2', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.MovementAggregate.Direction", b =>
                {
                    b.Property<int>("Id")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Directions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "in"
                        },
                        new
                        {
                            Id = -1,
                            Name = "out"
                        });
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.MovementAggregate.Movement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<int>("DirectionId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long?>("OwnerId");

                    b.Property<decimal>("PlanAmount");

                    b.Property<long>("ProjectId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("DirectionId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Movements");
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.MovementAggregate.MovementItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("Description");

                    b.Property<long>("MovementId");

                    b.Property<long?>("OwnerId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("MovementId");

                    b.HasIndex("OwnerId");

                    b.ToTable("MovementItems");
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.ProjectAggregate.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<long>("OwnerId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Currency");

                    b.HasIndex("Name");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.UserAggregate.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<DateTime>("Expires");

                    b.Property<string>("RemoteIpAddress")
                        .HasMaxLength(255);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("nextval('\"AppUserId\"')");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 6, 18, 0, 14, 27, 553, DateTimeKind.Unspecified).AddTicks(2670), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@finance.com",
                            IdentityId = "d48ef9ed-313e-40d5-94f8-6fb1d0b20d3d",
                            Role = "admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.MovementAggregate.Movement", b =>
                {
                    b.HasOne("IA.Finance.Domain.AggregatesModel.MovementAggregate.Direction", "Direction")
                        .WithMany()
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IA.Finance.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("IA.Finance.Domain.AggregatesModel.ProjectAggregate.Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.MovementAggregate.MovementItem", b =>
                {
                    b.HasOne("IA.Finance.Domain.AggregatesModel.MovementAggregate.Movement")
                        .WithMany("MovementItems")
                        .HasForeignKey("MovementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IA.Finance.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.ProjectAggregate.Project", b =>
                {
                    b.HasOne("IA.Finance.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IA.Finance.Domain.AggregatesModel.UserAggregate.RefreshToken", b =>
                {
                    b.HasOne("IA.Finance.Domain.AggregatesModel.UserAggregate.User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
